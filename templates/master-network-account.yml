AWSTemplateFormatVersion: 2010-09-09

Description: ---

Parameters:
  AWSOrganizationId:
    Type: String
    Description: AWS Organization ID to share the resources with. Obtain from 'aws organizations describe-organization'
    Default: o-5jfmdvb7mm
    MinLength: 12
    MaxLength: 12
  MasterAccountId:
    Type: String
    Description: Account ID of the Control Tower Master
    Default: 663281515832
    MinLength: 12
    MaxLength: 12

# Mappings: 

# Conditions: 

Resources: 
  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  rTransitSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref rVPC
      CidrBlock: 10.0.0.0/28
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-TransitSubnetA

  rTransitSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref rVPC
      CidrBlock: 10.0.0.16/28
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-TransitSubnetB

  rTransitNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-TransitSubnetNACL

  rTransitSubnetANaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rTransitNACL
      SubnetId: !Ref rTransitSubnetA

  rTransitSubnetBNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref rTransitNACL
      SubnetId: !Ref rTransitSubnetB

  rIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref rVPC
      InternetGatewayId: !Ref rIGW

  rTrustSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref rVPC
      CidrBlock: 10.0.0.32/28
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-TrustedSubnetA

  rTrustSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref rVPC
      CidrBlock: 10.0.0.48/28
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-TrustedSubnetB

  rUnTrustSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref rVPC
      CidrBlock: 10.0.0.64/28
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-UnTrustedSubnetA

  rUnTrustSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref rVPC
      CidrBlock: 10.0.0.80/28
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-UnTrustedSubnetB

  rManagementSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref rVPC
      CidrBlock: 10.0.255.0/28
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ManagementSubnet

  rManagementRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Management-RT     

  rUnTrustART:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-UnTrust-A-RT

  rUnTrustBRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-UnTrust-B-RT

  rTrustART:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Trust-A-RT

  rTrustBRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Trust-B-RT

  rTransitART:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Transit-A-RT

  rTransitBRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Transit-B-RT

  rTransitASubAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rTransitART
      SubnetId: !Ref rTransitSubnetA

  rTransitBSubAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rTransitBRT
      SubnetId: !Ref rTransitSubnetB

  rUnTrustASubAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rUnTrustART
      SubnetId: !Ref rUnTrustSubnetA

  rUnTrustBSubAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rUnTrustBRT
      SubnetId: !Ref rUnTrustSubnetB
  
  rTrustASubAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rTrustART
      SubnetId: !Ref rTrustSubnetA

  rTrustBSubAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rTrustBRT
      SubnetId: !Ref rTrustSubnetB

  rManagementSubAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rManagementRT
      SubnetId: !Ref rManagementSubnet

  rUntrustADefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rIGW
      RouteTableId: !Ref rUnTrustART

  rUntrustBDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rIGW
      RouteTableId: !Ref rUnTrustBRT

  rTGW:
    Type: AWS::EC2::TransitGateway
    Properties:
      DnsSupport: enable
      VpnEcmpSupport: enable
      AutoAcceptSharedAttachments: enable
      DefaultRouteTableAssociation: disable
      DefaultRouteTablePropagation: disable
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-TGW

  rTGWAttach:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      TransitGatewayId: !Ref rTGW
      VpcId: !Ref rVPC
      SubnetIds:
        - !Ref rTransitSubnetA
        - !Ref rTransitSubnetB

  rTGWRouteTableOutside:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !Ref rTGW

  rTGWRouteTableInside:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !Ref rTGW

  rTGWRouteEgress:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      TransitGatewayRouteTableId: !Ref rTGWRouteTableOutside
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayAttachmentId: !Ref rTGWAttach

  rTGWAssociate:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref rTGWAttach
      TransitGatewayRouteTableId: !Ref rTGWRouteTableInside

  rTGWRouteEgressPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayRouteTableId: !Ref rTGWRouteTableInside
      TransitGatewayAttachmentId: !Ref rTGWAttach

  rTGWShare:
    Type: AWS::RAM::ResourceShare
    Properties:
      Name: "Master Network Account TGW"
      ResourceArns:
        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:transit-gateway/${rTGW}"
      Principals:
        - !Sub "arn:aws:organizations::${MasterAccountId}:organization/${AWSOrganizationId}"

  rMiddleboxENISG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic to the middlebox ENI
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MiddleboxENI-SG


  rMiddleboxENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Used for inbound routing from internet to middlebox for inspection
      SourceDestCheck: false
      SubnetId: !Ref rUnTrustSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MiddleboxENI

  rIngressRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC

      
  rIGWEdgeAssociation:
    Type: AWS::EC2::GatewayRouteTableAssociation
    Properties:
      GatewayId: !Ref rIGW
      RouteTableId: !Ref rIngressRT

  rUpdateLocalRouteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: UpdateRouteLambdaExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ec2:ReplaceRoute
                Resource: !Join
                  - ''
                  - - 'arn:aws:ec2:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':route-table/'
                    - !Ref rIngressRT
                  # !Join
                  #   - ""
                  #   - - !Sub arn:aws:ec2:{$AWS::Region}:{$AWS::AccountId}:route-table/
                  #     - !Ref rIngressRT
          

  rUpdateLocalRouteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          from botocore.exceptions import ClientError

          ec2 = boto3.resource('ec2')

          def lambda_handler(event, context):
              print(json.dumps(event))

              route_table_id = event['ResourceProperties']['route_table_id']
              destination_cidr_block = ['ResourceProperties']['cidr']
              destination = ['ResourceProperties']['destination']
              
              try:
                  route = ec2.Route(route_table_id, destination_cidr_block)
              except ClientError as e:
                  print("Could not find the route given route table id: {} with destination cidr: {}".format(route_table_id, destination_cidr_block))
              
              try:
                  response = route.replace(NetworkInterfaceId=destination)
              except ClientError as e:
                  print("""Route update failed using the following parameters: \n
                        Route Table Id: {}\n
                        Destination CIDR Block: {}\n
                        Network Interface: {}.
                        """.format(route_table_id, destination_cidr_block, destination)
                  
              print("UpdateRoute Function Complete")
      Role: !GetAtt rUpdateLocalRouteRole.Arn
      Timeout: 60
      Runtime: python3.7
      Handler: lambda_function.lambda_handler 

  rUpdateLocalRoute:
    Type: Custom::RouteUpdate
    Properties:
        ServiceToken: arn:aws:lambda:us-east-1:256060500942:function:UpdateLocalRoute
        route_table_id: !Ref rIngressRT
        destination_cidr_block: !GetAtt rVPC.CidrBlock
        destination: !Ref rMiddleboxENI

  # rGWRTInboundRoute1:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     DestinationCidrBlock: 10.0.0.0/17
  #     NetworkInterfaceId: !Ref rMiddleboxENI
  #     RouteTableId: !Ref rIngressRT


  # rGWRTInboundRoute2:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     DestinationCidrBlock: 10.0.128.0/17
  #     NetworkInterfaceId: !Ref rMiddleboxENI
  #     RouteTableId: !Ref rIngressRT
      